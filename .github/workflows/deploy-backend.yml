name: CI/CD for Spring Boot App

on:
  push:
    branches:
      - main
    paths:
      - 'server-transformer/**'  
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server-transformer

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: maven

      - name: Build with Maven
        run: |
          mvn clean package -DskipTests
          ls -la target/

      - name: Run Tests
        run: mvn test
        env:
          PSQL_USER: ${{ secrets.PSQL_USER }}
          PSQL_PASSWORD: ${{ secrets.PSQL_PASSWORD }}

      - name: Check for JAR file
        run: |
          JAR_FILE=$(find target -name "*.jar" -not -name "*sources.jar" -not -name "*javadoc.jar" | head -1)
          if [ -z "$JAR_FILE" ]; then
            echo "Error: No executable JAR found in target directory."
            ls -la target/
            exit 1
          fi
          echo "Found JAR: $JAR_FILE"
          echo "JAR_FILE=$(basename $JAR_FILE)" >> $GITHUB_ENV

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packaged-application
          path: server-transformer/target/*.jar
  
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: packaged-application
          path: ./

      - name: Copy JAR to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ec2-user
          key: ${{ secrets.DEPLOY_KEY }}
          source: "*.jar"
          target: "/home/ec2-user/deployment/"

      - name: Deploy and Update Systemd Service
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ec2-user
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            cd /home/ec2-user/deployment
            
            # Create environment file with your PostgreSQL credentials
            cat > application.env << EOF
            PSQL_USER=${{ secrets.PSQL_USER }}
            PSQL_PASSWORD=${{ secrets.PSQL_PASSWORD }}
            SPRING_PROFILES_ACTIVE=production
            EOF
            
            # Set proper permissions for env file
            chmod 600 application.env
            
            # Stop existing service
            sudo systemctl stop spring-boot-app || true
            
            # Find the JAR file and rename it to app.jar
            JAR_FILE=$(find . -name "*.jar" -not -name "*sources.jar" -not -name "*javadoc.jar" | head -1)
            if [ -z "$JAR_FILE" ]; then
              echo "Error: No JAR file found!"
              ls -la
              exit 1
            fi
            
            echo "Found JAR file: $JAR_FILE"
            
            # Backup current JAR if exists
            if [ -f app.jar ]; then
              mv app.jar app-backup-$(date +%Y%m%d-%H%M%S).jar
            fi
            
            # Move new JAR to expected location
            mv "$JAR_FILE" app.jar
            
            # Ensure JAR is executable
            chmod +x app.jar
            
            # Verify the JAR file exists
            if [ ! -f app.jar ]; then
              echo "Error: app.jar was not created successfully!"
              ls -la
              exit 1
            fi
            
            echo "JAR file ready: $(ls -la app.jar)"
            
            # Create or update systemd service file
            sudo tee /etc/systemd/system/spring-boot-app.service > /dev/null << EOF
            [Unit]
            Description=Spring Boot Application
            After=network.target
            
            [Service]
            Type=simple
            User=ec2-user
            WorkingDirectory=/home/ec2-user/deployment
            ExecStart=/usr/bin/java -jar /home/ec2-user/deployment/app.jar
            EnvironmentFile=/home/ec2-user/deployment/application.env
            Restart=always
            RestartSec=10
            
            [Install]
            WantedBy=multi-user.target
            EOF
            
            # Reload systemd and start service
            sudo systemctl daemon-reload
            sudo systemctl enable spring-boot-app
            sudo systemctl start spring-boot-app
            
            # Wait and check if service started successfully
            sleep 15
            if sudo systemctl is-active --quiet spring-boot-app; then
              echo "✅ Spring Boot application deployed successfully"
              echo "Application status:"
              sudo systemctl status spring-boot-app --no-pager -l
            else
              echo "❌ Failed to start Spring Boot application"
              echo "Service logs:"
              sudo journalctl -u spring-boot-app --no-pager -n 30
              exit 1
            fi